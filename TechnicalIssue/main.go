package main

import (
  "bytes"
  "net/http"
  "net/http/httputil"
  "net/url"

  "github.com/gin-gonic/gin"
  "github.com/google/uuid"
  "github.com/tidwall/sjson"
)

/**
 * The purpose of this test is to write a middleware to modify the response body on a gin request.
 * Gin app receives requests and acts as a reverse proxy for the requested url.
 * Proxy entrypoint is a json mock app http://dummyjson.com.
 *
 * We want to add in the output payload a new signature field (uuid) in addition of the proxy response content.
 * You need to add a autogenerated uuid v1 in the output payload using the signature middleware.
 * For example : http://localhost:8080/products/1 returns
 * {
 *   "id": 1,
 *   "title": "iPhone 9",
 *   "description": "An apple mobile which is nothing like apple",
 *   "price": 549,
 *   "discountPercentage": 12.96,
 *   "rating": 4.69,
 *   "stock": 94,
 *   "brand": "Apple",
 *   "category": "smartphones",
 *   "thumbnail": "https://dummyjson.com/image/i/products/1/thumbnail.jpg",
 *   "images": [
 *     "https://dummyjson.com/image/i/products/1/1.jpg",
 *     "https://dummyjson.com/image/i/products/1/2.jpg",
 *     "https://dummyjson.com/image/i/products/1/3.jpg",
 *     "https://dummyjson.com/image/i/products/1/4.jpg",
 *     "https://dummyjson.com/image/i/products/1/thumbnail.jpg"
 *   ],
 *   "uuid": "92a664e8-60f7-11ed-9b6a-0242ac120002"
 * }
 *
 * You cannot use the proxy Director method to modify the response
 * The resolution must be not dependant of the api object, should work for products, comments or todos.
 */

// main app start, creates a gin app listening and :8080.
func main() {
  r := gin.Default()

  // Signature middleware is applied for each request
  r.Use(signature())

  // Requests are proxified using httputil.ReverseProxy
  r.Any("/*proxyPath", proxy())

  r.Run()
}

// proxy middleware will redirect request to json placeholder app https://dummyjson.com
// nothing to do here
func proxy() gin.HandlerFunc {
  return func(c *gin.Context) {
    remote, err := url.Parse("https://dummyjson.com/products/1")
    if err != nil {
      panic(err)
    }

    c.Request.Header.Del("If-None-Match")

    pxy := httputil.NewSingleHostReverseProxy(remote)
    pxy.Director = func(req *http.Request) {
      req.Header = c.Request.Header
      req.Host = remote.Host
      req.URL.Scheme = remote.Scheme
      req.URL.Host = remote.Host
      req.URL.Path = c.Param("proxyPath")
    }

    pxy.ServeHTTP(c.Writer, c.Request)
    c.Next()
  }
}

// signature middleware add a custom signature field in the output payload with auto-generated uuid
func signature() gin.HandlerFunc {
  return func(c *gin.Context) {
    w := &responseBodyWriter{body: &bytes.Buffer{}, ResponseWriter: c.Writer}
    c.Writer = w
    c.Next()
  }
}

type responseBodyWriter struct {
  gin.ResponseWriter
  body *bytes.Buffer
}

func (r responseBodyWriter) Write(b []byte) (int, error) {
  requestID, err := uuid.NewUUID()
  if err != nil {
    return 0, err
  }
  res, _ := sjson.Set(string(b), "uuid", requestID)
  enrichedBody := []byte(res)
  r.body.Write(enrichedBody)
  return r.ResponseWriter.Write(enrichedBody)
}
