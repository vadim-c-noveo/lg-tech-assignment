package main

import (
  "bufio"
  "bytes"
  "net"
  "net/http"
  "net/http/httputil"
  "net/url"
  "strconv"

  "github.com/gin-gonic/gin"
  "github.com/google/uuid"
  "github.com/tidwall/sjson"
)

/**
 * The purpose of this test is to write a middleware to modify the response body on a gin request.
 * Gin app receives requests and acts as a reverse proxy for the requested url.
 * Proxy entrypoint is a json mock app http://dummyjson.com.
 *
 * We want to add in the output payload a new signature field (uuid) in addition of the proxy response content.
 * You need to add a autogenerated uuid v1 in the output payload using the signature middleware.
 * For example : http://localhost:8080/products/1 returns
 * {
 *   "id": 1,
 *   "title": "iPhone 9",
 *   "description": "An apple mobile which is nothing like apple",
 *   "price": 549,
 *   "discountPercentage": 12.96,
 *   "rating": 4.69,
 *   "stock": 94,
 *   "brand": "Apple",
 *   "category": "smartphones",
 *   "thumbnail": "https://dummyjson.com/image/i/products/1/thumbnail.jpg",
 *   "images": [
 *     "https://dummyjson.com/image/i/products/1/1.jpg",
 *     "https://dummyjson.com/image/i/products/1/2.jpg",
 *     "https://dummyjson.com/image/i/products/1/3.jpg",
 *     "https://dummyjson.com/image/i/products/1/4.jpg",
 *     "https://dummyjson.com/image/i/products/1/thumbnail.jpg"
 *   ],
 *   "uuid": "92a664e8-60f7-11ed-9b6a-0242ac120002"
 * }
 *
 * You cannot use the proxy Director method to modify the response
 * The resolution must be not dependant of the api object, should work for products, comments or todos.
 */

const (
  noWritten     = -1
  defaultStatus = 200
)

// main app start, creates a gin app listening and :8080.
func main() {
  r := gin.Default()

  // Signature middleware is applied for each request
  r.Use(signature())

  // Requests are proxified using httputil.ReverseProxy
  r.Any("/*proxyPath", proxy())

  r.Run()
}

// proxy middleware will redirect request to json placeholder app https://dummyjson.com
// nothing to do here
func proxy() gin.HandlerFunc {
  return func(c *gin.Context) {
    remote, err := url.Parse("https://dummyjson.com/products/1")
    if err != nil {
      panic(err)
    }

    c.Request.Header.Del("If-None-Match")

    pxy := httputil.NewSingleHostReverseProxy(remote)
    pxy.Director = func(req *http.Request) {
      req.Header = c.Request.Header
      req.Host = remote.Host
      req.URL.Scheme = remote.Scheme
      req.URL.Host = remote.Host
      req.URL.Path = c.Param("proxyPath")
    }

    pxy.ServeHTTP(c.Writer, c.Request)
    c.Next()
  }
}

// signature middleware add a custom signature field in the output payload with auto-generated uuid
func signature() gin.HandlerFunc {
  return func(c *gin.Context) {
    var bw *ResponseBodyWriter
    if w, ok := c.Writer.(gin.ResponseWriter); ok {
      bw = NewResponseBodyWriter(w)
      c.Writer = bw
      c.Next()
    } else {
      c.Next()
      return
    }

    requestID, err := uuid.NewUUID()
    if err != nil {
      panic(err.Error())
    }

    res, _ := sjson.Set(string(bw.Body.Bytes()), "uuid", requestID)
    bw.Body.Reset()
    enrichedBody := []byte(res)
    bw.Body.Write(enrichedBody)

    bw.Header().Set("Content-Type", "application/json")
    bw.Header().Set("Content-Length", strconv.Itoa(bw.Body.Len()))

    bw.Flush()
  }
}

type ResponseBodyWriter struct {
  Response gin.ResponseWriter // actual gin.ResponseWriter
  status   int
  Body     *bytes.Buffer // response body
  Flushed  bool
}

func (w *ResponseBodyWriter) Pusher() http.Pusher {
  if pusher, ok := w.Response.(http.Pusher); ok {
    return pusher
  }
  return nil
}

func NewResponseBodyWriter(c gin.ResponseWriter) *ResponseBodyWriter {
  return &ResponseBodyWriter{Response: c, status: defaultStatus, Body: &bytes.Buffer{}}
}

func (w *ResponseBodyWriter) Header() http.Header {
  return w.Response.Header()
}

func (w *ResponseBodyWriter) Write(buf []byte) (int, error) {
  w.Body.Write(buf)
  return len(buf), nil
}

func (w *ResponseBodyWriter) WriteString(s string) (n int, err error) {
  n, err = w.Write([]byte(s))
  return
}

func (w *ResponseBodyWriter) Written() bool {
  return w.Body.Len() != noWritten
}

func (w *ResponseBodyWriter) WriteHeader(status int) {
  w.status = status
}

func (w *ResponseBodyWriter) WriteHeaderNow() {
}

func (w *ResponseBodyWriter) Status() int {
  return w.status
}

func (w *ResponseBodyWriter) Size() int {
  return w.Body.Len()
}

func (w *ResponseBodyWriter) Hijack() (net.Conn, *bufio.ReadWriter, error) {
  return w.Response.(http.Hijacker).Hijack()
}

func (w *ResponseBodyWriter) CloseNotify() <-chan bool {
  return w.Response.(http.CloseNotifier).CloseNotify()
}

func (w *ResponseBodyWriter) Flush() {
  if w.Flushed {
    return
  }
  w.Response.WriteHeader(w.status)
  if w.Body.Len() > 0 {
    _, err := w.Response.Write(w.Body.Bytes())
    if err != nil {
      panic(err)
    }
    w.Body.Reset()
  }
  w.Flushed = true
}
